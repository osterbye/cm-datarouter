#!/usr/bin/python3

import MessageDefinitions_pb2

filename = 'status_updates.schema'

template = \
'''/* This file is auto-generated by gen_sql_schema.py script, manual changes will be lost

SQLite database can be created from this schema using following command:
      sqlite3 status_updates.sqlite < status_updates.schema
*/

CREATE TABLE measurements (
{generated_code}
);

{comment_section}

'''

type_mapping = {
  'TYPE_BOOL':       'INT',
  'TYPE_BYTES':      'INT',
  'TYPE_DOUBLE':     'FLOAT',
  'TYPE_ENUM':       'INT',
  'TYPE_FIXED32':    'INT',
  'TYPE_FIXED64':    'INT',
  'TYPE_FLOAT':      'FLOAT',
  'TYPE_GROUP':      'BLOB',
  'TYPE_INT32':      'INT',
  'TYPE_INT64':      'INT',
  'TYPE_MESSAGE':    'BLOB',
  'TYPE_SFIXED32':   'INT',
  'TYPE_SFIXED64':   'INT',
  'TYPE_SINT32':     'INT',
  'TYPE_SINT64':     'INT',
  'TYPE_STRING':     'TEXT',
  'TYPE_UINT32':     'INT',
  'TYPE_UINT64':     'INT',
}

type_conversion = {}

statusUpdate = MessageDefinitions_pb2.StatusUpdate()

# build type conversion table for mapping PB type numbers to SQL type strings
for key, value in type_mapping.items():
  num = getattr(statusUpdate.DESCRIPTOR.fields[0], key)
  type_conversion[num] = value

lines = []
comments = []

for field in statusUpdate.DESCRIPTOR.fields:
  if field.label == field.LABEL_OPTIONAL or field.label == field.LABEL_REQUIRED:
    line = '\t{0:<25}{1},'.format(field.name, type_conversion[field.type])
    lines.append(line)
  elif field.label == field.LABEL_REPEATED:
    line = '/* {0} not included because repeated fields need special handling */'.format(field.name)
    comments.append(line)
  else:
    print('Warning: field label {0} handling not implemented'.format(field.label))

# insert column for storing dump of protobuf message
line = '\t{0:<25}{1}'.format('pbMessageDump', 'BLOB')
lines.append(line)

generated_code  = '\n'.join(lines)
comment_section = '\n'.join(comments)

with open(filename, 'w') as file:
  file.write(template.format(generated_code=generated_code, comment_section=comment_section))
